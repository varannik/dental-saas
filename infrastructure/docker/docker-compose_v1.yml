version: '3.8'

services:
  api-gateway:
    image: traefik:v3.3
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http3=true"
      - "--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    networks:
      - dental-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`traefik.yourdomain.com`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=myresolver"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${BASIC_AUTH_USERS}"


  voice-agent:
    build: ../services/voice-agent
    ports:
      - "8000:8000"
    volumes:
      - ../services/voice-agent:/app
      - ../services/voice-agent/uploads:/app/uploads
      - ../services/voice-agent/audio_responses:/app/audio_responses
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - ELEVENLABS_VOICE_ID=${ELEVENLABS_VOICE_ID}
    depends_on:
      - redis
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  postgres:
      image: postgres:16-alpine
      restart: unless-stopped
      environment:
        - POSTGRES_USER=${DB_USER:-postgres}
        - POSTGRES_PASSWORD=${DB_PASSWORD:-changeme}
        - POSTGRES_MULTIPLE_DATABASES=dental_auth,dental_patient,dental_communication,dental_subscription
        - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
        - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      logging:
        driver: "json-file"
        options:
          max-size: "10m"
          max-file: "3"
      volumes:
        - postgres-data:/var/lib/postgresql/data
        - ./postgres-init:/docker-entrypoint-initdb.d:ro
      ports:
        - "5432:5432"
      networks:
        - dental-network
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
        interval: 10s
        timeout: 5s
        retries: 5


  mongo:
    image: mongo:8
    volumes:
      - mongo-data:/data/db
    ports:
      - "127.0.0.1:27017:27017"  # Restrict to localhost connections
    networks:
      - dental-network
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}  # Use environment variable
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          memory: 1G
    command: ["--wiredTigerCacheSizeGB", "0.5"]  # Limit cache usage

  minio:
    image: minio/minio:latest  # Using official repo with latest tag
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}  # Using env vars with defaults
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
      - MINIO_BROWSER_REDIRECT_URL=https://console.your-domain.com  # For production
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
      - minio-data:/data
    ports:
      - "127.0.0.1:9000:9000"  # Restrict to localhost connections
      - "127.0.0.1:9001:9001"  # Restrict console access
    networks:
      - dental-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    labels:
      - "traefik.enable=true"  # Optional: for Traefik reverse proxy integration

  weaviate:
    command:
      - --host
      - 0.0.0.0
      - --port
      - '8080'
      - --scheme
      - http
    image: cr.weaviate.io/semitechnologies/weaviate:1.28.2
    ports:
      - 8080:8080
      - 50051:50051
    networks:
      - dental-network
    volumes:
      - weaviate-data:/var/lib/weaviate
      - weaviate-backups:/var/lib/weaviate-backups  # Add backup volume
    restart: on-failure:0
    environment:
      TRANSFORMERS_INFERENCE_API: 'http://t2v-transformers:8080'
      QNA_INFERENCE_API: 'http://qna-transformers:8080'
      NER_INFERENCE_API: 'http://ner-transformers:8080'
      SUM_INFERENCE_API: 'http://sum-transformers:8080'
      SPELLCHECK_INFERENCE_API: 'http://text-spellcheck:8080'
      OPENAI_APIKEY: $OPENAI_APIKEY
      ANTHROPIC_APIKEY: $ANTHROPIC_APIKEY
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'text2vec-transformers'
      ENABLE_MODULES: 'text2vec-transformers,qna-transformers,ner-transformers,sum-transformers,text-spellcheck,generative-openai,generative-anthropic,generative-ollama'
      CLUSTER_HOSTNAME: 'node1'
    depends_on:
      t2v-transformers:
        condition: service_healthy  # Wait for transformer service to be healthy      
      qna-transformers:
        condition: service_healthy  # Wait for transformer service to be healthy
      ner-transformers:
        condition: service_healthy  # Wait for transformer service to be healthy
      sum-transformers:
        condition: service_healthy  # Wait for transformer service to be healthy
      text-spellcheck:
        condition: service_healthy  # Wait for transformer service to be healthy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  t2v-transformers:
    image: cr.weaviate.io/semitechnologies/transformers-inference:sentence-transformers-all-MiniLM-L12-v2
    networks:
      - dental-network
    environment:
      ENABLE_CUDA: '0'
  qna-transformers:
    image: cr.weaviate.io/semitechnologies/qna-transformers:distilbert-base-uncased-distilled-squad
    networks:
      - dental-network
    environment:
      ENABLE_CUDA: '0'
  ner-transformers:
    image: cr.weaviate.io/semitechnologies/ner-transformers:dslim-bert-base-NER
    networks:
      - dental-network
    environment:
      ENABLE_CUDA: '0'
  sum-transformers:
    image: cr.weaviate.io/semitechnologies/sum-transformers:facebook-bart-large-cnn-1.0.0
    networks:
      - dental-network
    environment:
      ENABLE_CUDA: '0'
  text-spellcheck:
    image: cr.weaviate.io/semitechnologies/text-spellcheck-model:pyspellchecker-en
    networks:
      - dental-network
    environment:
      ENABLE_CUDA: '0'

  redis:
    image: redis:7.2-alpine
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD:-changeme}", "--appendonly", "yes"]
    volumes:
      - redis-data:/data
    ports:
      - "127.0.0.1:6379:6379"  # Restrict to localhost connections
    networks:
      - dental-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

networks:
  dental-network:
    driver: bridge

volumes:
  letsencrypt:
  postgres-data:
  mongo-data:
  minio-data:
  weaviate-data:
  weaviate-backups:
  transformer-cache:
  redis-data: